// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	// Create figure 5.9 scheme
	Mux16(a = out0 , b = instruction , sel = noti , out = inA);	//mux2 in my scheme
	ARegister(in = inA , out = outA, load = loadA , out[0..14] = addressM );
	DRegister(in = out0 , load = loadD , out = outD);				
	Mux16(a = outA , b = inM , sel = instruction[12] , out = inALU); //mux1 in my scheme
	PC(in = outA , reset = reset , load = jump , inc = njump , out[0..14] = pc);
	ALU(x = outD , y = inALU , zx = instruction[11] , nx = instruction[10] , zy = instruction[9] , ny = instruction[8], f = instruction[7] , no = instruction[6] , out = out0 , out = outM , zr = jzr , ng = jng);
	
	// Create the Control Unit
	
	//load in A register
	Not(in = instruction[15] , out = noti);
	Or(a = noti , b = instruction[5] , out = loadA);
	
	//load in D register
	And(a = instruction[15] , b = instruction[4] , out = loadD);
	
	//load in Memory (writeM)
	And(a = instruction[15] , b = instruction[3] , out = writeM);
	
	//Program counter control
	And(a = instruction[2] , b = jng , out = j1);
	And(a = instruction[1] , b = jzr , out = j2);
	Not(in = jng , out = njng);
	Not(in = jzr , out = njzr);
	And(a = instruction[0] , b =njng , out = jtemp0);
	And(a = jtemp0 , b = njzr , out = j3);
	Or(a = j1 , b = j2 , out = jtemp1);
	Or(a = jtemp1 , b = j3 , out = j);
	And(a = j , b = instruction[15] , out = jump);
	Not(in = jump , out = njump);
	
}




